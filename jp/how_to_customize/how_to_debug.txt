前提
 Windows 10(ip address: 192.168.11.9)にて下記を動作させる
   Eclipseもしくはvscode(remote SSHで192.168.11.48に接続, Java Extension Pack導入済み)
   Ubuntu 18.04LTS (VMWAREの仮想マシン)

 Ubuntu (ip address: 192.168.11.48)
$ java -version
openjdk version "11.0.9.1" 2020-11-04
OpenJDK Runtime Environment (build 11.0.9.1+1-Ubuntu-0ubuntu1.18.04)
OpenJDK 64-Bit Server VM (build 11.0.9.1+1-Ubuntu-0ubuntu1.18.04, mixed mode, sharing)
$ javac -version
javac 11.0.9.1
$ mvn -version
Apache Maven 3.6.0
Maven home: /usr/share/maven
Java version: 11.0.9.1, vendor: Ubuntu, runtime: /usr/lib/jvm/java-11-openjdk-amd64
Default locale: ja_JP, platform encoding: UTF-8
OS name: "linux", version: "4.15.0-122-generic", arch: "amd64", family: "unix"
$ docker version
Client: Docker Engine - Community
 Version:           19.03.13
 API version:       1.40
 Go version:        go1.13.15
 Git commit:        4484c46d9d
 Built:             Wed Sep 16 17:02:36 2020
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.13
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.13.15
  Git commit:       4484c46d9d
  Built:            Wed Sep 16 17:01:06 2020
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          1.3.7
  GitCommit:        8fba4e9a7d01810a393d5d25a3621dc101981175
 runc:
  Version:          1.0.0-rc10
  GitCommit:        dc9208a3303feef5b3839f4323d9beb36df0a9dd
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683
$ docker-compose version
docker-compose version 1.25.4, build 8d51620a
docker-py version: 4.1.0
CPython version: 3.7.5
OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019

====================================================================

ローカル(コンテナ)で実行する方法

1) コンテナ用のライセンスキーをIRISLicense/iris.keyに配置

2) 起動方法
user@ubuntu:~/git/irisdemo-demo-htap$ docker-compose -f docker-compose-enterprise-iris.yml up -d 
user@ubuntu:~/git/irisdemo-demo-htap$ docker-compose -f docker-compose-enterprise-iris.yml ps
     Name                   Command                       State                                 Ports
----------------------------------------------------------------------------------------------------------------------------
htapirisdb       /iris-main --key /irislice ...   Up (health: starting)   0.0.0.0:51773->51773/tcp, 0.0.0.0:10001->52773/tcp
htapmaster       /app/run.sh                      Up (healthy)            0.0.0.0:10002->8080/tcp
htapui           docker-entrypoint.sh /bin/ ...   Up                      0.0.0.0:10000->4200/tcp
ingest-worker1   /app/run.sh                      Up (healthy)            0.0.0.0:10003->8080/tcp
query-worker1    /app/run.sh                      Up (healthy)            0.0.0.0:10004->8080/tcp
user@ubuntu:~/git/irisdemo-demo-htap$ 

3) UIへのアクセス
ポータルへのアクセス
http://192.168.11.48:10001/csp/sys/%25CSP.Portal.Home.zen
SuperUser/sys

ベンチマーク画面へのアクセス
http://192.168.11.48:10000/ 

4) 停止方法
user@ubuntu:~/git/irisdemo-demo-htap$ docker-compose -f docker-compose-enterprise-iris.yml down

------------------------------------------------------------------------------------------------------

ingest-worker(iris-jdbc-ingest-module)をWindows+Eclipse/vscodeでデバッグ実行する方法。

1) docker-compose-enterprise-iris.ymlを編集する。
1-1) コンテナの外部からJDBCアクセス可能にするために51773をexposeする。
  htapirisdb: 
    ports:
    - "51773:51773" # Allow JDBC connection from Windows

1-2) ingest-workerが接続するJDBC接続先を示すURLをデバッグ実行する環境から見えるホスト(htapirisdbはコンテナ内からしか見えない)を指すように変更する。
192.168.11.48はVMWare上で稼働しているLinuxの(Windows10から到達可能な)ホスト名/IP。

  htapmaster:
      #- INGESTION_JDBC_URL=jdbc:IRIS://htapirisdb:51773/USER
      - INGESTION_JDBC_URL=jdbc:IRIS://192.168.11.48:51773/USER

もしレポジトリ名を変更していた場合は、下記を修正。
  ingest-worker1:
    image: intersystemsdc/irisdemo-demo-htap:iris-jdbc-ingest-worker-version-2.5.2

  query-worker1:
    image: intersystemsdc/irisdemo-demo-htap:iris-jdbc-query-worker-version-2.5.2

ICM/ICMDurable/utils.shのfind_iris_database_size()を修正。初期DB拡張サイズを低めに設定。
    export DATABASE_SIZE_IN_GB=1

IRISLicense/iris.key(コンテナ用)を配置する。(これが無いとhtapirisdbが異常終了する)

2) (デバッグ対象である)ingest-worker以外をコンテナ(Linux on VMWARE使用)で起動
user@ubuntu:~/git/irisdemo-demo-htap$ docker-compose -f docker-compose-enterprise-iris.yml up -d  htapirisdb htapmaster htapui query-worker1
Creating network "irisdemo-demo-htap_default" with the default driver
Creating htapirisdb ... done
Creating htapmaster ... done
Creating htapui        ... done
Creating query-worker1 ... done
user@ubuntu:~/git/irisdemo-demo-htap$

下記によりログを見ていると何が起こっているか把握しやすい。
user@ubuntu:~/git/irisdemo-demo-htap$ docker-compose -f docker-compose-enterprise-iris.yml logs -f htapmaster

3) ポータルの正常動作を確認
http://192.168.11.48:10001/csp/sys/%25CSP.Portal.Home.zen
SuperUser/sys

4) BPの設定場所
Break Pointを設定
主なBPのかけどころは...
ingest-controller-module project
com.irisdemo.htap.config.ConfigService.registerWithMasterAndGetConfig()

iris-jdbc-ingest-module project
com.irisdemo.htap.worker.iris.prepareDatabaseForSpeedTest()
com.irisdemo.htap.worker.iris.IRISWorker.startOneFeed()   <= ここがメインのINSERT処理なのでこの辺りにBPをしかける

Unable to install breakpoint（Absent Line Number Information）が出るが無視。

5) デバッグ実行
5-1) Windows+Eclipseでデバッグ実行する。

Debug ConfigurationsでSpring Boot Appを作成する。
- Project: iris-jdbc-ingest-module　を選択
- Main type: com.irisdemo.htap.App　を選択
- Environmentを追加
start_ingestion_worker.shを参考に。
(https://github.com/IRISMeister/irisdemo-demo-htap/blob/master/standalone_scripts/iris-jdbc/start_ingestion_worker.sh)
HOSTNAME	192.168.11.9   (Windows10のIP)
MASTER_HOSTNAME	192.168.11.48  (VMWARE上のLinuxのIP)
MASTER_PORT	10002
MODE	run  これしないとバックグラウンドになる

5-2) vscode+RemoteSSHでデバッグ実行する。
launch.jsonを参考に、env設定のHOSTNAME,MASTER_HOSTNAMEを共にLinuxのIPになるよう変更する。
            "name": "Debug (Launch)-App<iris-jdbc-ingest-worker>",
            "env": {"HOSTNAME":"192.168.11.48", "MASTER_HOSTNAME":"192.168.11.48","MASTER_PORT":"10002","MODE":"run"},

Debug(launch)-App<iris-jdbc-ingest-worker>をデバッグ実行。

Debugger for java(extension)が Build failed, do you want to continue?と出力されるかもしれないが、ここでは無視する(Proceedを選択)。
対処方法はhow_to_customize_your_images.txt。

デバッグ出力は、パネル内のTERMINALのJava Debug Consoleから参照可能。

6) ベンチマーク実行
http://192.168.11.48:10000/ でUIを表示し、アプリを起動。

Run Test押下直後は、データベースの拡張を行うので、若干時間がかかる。
UIが固まるなど、動作がおかしくなったら、Eclipseのデバッグセッションを終了し、全コンテナを再起動してやり直し。
user@ubuntu:~/git/irisdemo-demo-htap$ docker-compose -f docker-compose-enterprise-iris.yml restart 

7) 終了方法
全コンテナを削除。
user@ubuntu:~/git/irisdemo-demo-htap$ docker-compose -f docker-compose-enterprise-iris.yml down

------------------------------------------------------------------------------------------------------
query-workerをWindows+Eclipse/vscodeでデバッグ実行する方法。
注意)Eclipseでingest-workerプロジェクトをopenしたままこの操作を行うとおかしくなる(null exception多発)のでcloseすること。

1) docker-compose-enterprise-iris.ymlを編集する。

1-1) コンテナの外部からJDBCアクセス可能にするために51773をexposeする。

  htapirisdb: 
    ports:
    - "51773:51773" # Allow JDBC connection from Windows

1-2) query-workerが接続するJDBC接続先を示すURLを変更する
注意)ingest-workerのデバッグで、INGESTION_JDBC_URLを変更していたら、元(htapirisdb)に戻すこと

  htapmaster:
      - INGESTION_JDBC_URL=jdbc:IRIS://htapirisdb:51773/USER
      #- CONSUMER_JDBC_URL=jdbc:IRIS://htapirisdb:51773/USER
      - CONSUMER_JDBC_URL=jdbc:IRIS://192.168.11.48:51773/USER

その他はingestと同様。

2) (デバッグ対象である)query-worker以外をコンテナ(Linux on VMWARE使用)で起動
user@ubuntu:~/git/irisdemo-demo-htap$ docker-compose -f docker-compose-enterprise-iris.yml up -d  htapirisdb htapmaster htapui ingest-worker1

3) 同様

4) BPの設定場所
Break Pointを設定
iris-jdbc-query-worker project
com.irisdemo.htap.worker.iris.IRISWorker.startOneConsumer()　<= ここがメインの処理

5) デバッグ実行
5-1) Windows+Eclipseでデバッグ実行する。

Debug ConfigurationsでSpring Boot Appを作成する。
-Project: iris-jdbc-query-worker
- Main type: com.irisdemo.htap.App
- Environmentを追加
start_query_worker.shを参考に。
(https://github.com/IRISMeister/irisdemo-demo-htap/blob/master/standalone_scripts/iris-jdbc/start_query_worker.sh)

HOSTNAME	192.168.11.9   (Windows10のIPアドレス)
MASTER_HOSTNAME	192.168.11.48
MASTER_PORT	10002
MODE	run  これしないとバックグラウンドになる

5-2) vscode+RemoteSSHでデバッグ実行する。
launch.jsonを参考に、env設定のHOSTNAME,MASTER_HOSTNAMEを共にLinuxのIPになるよう変更する。
            "name": "Debug (Launch)-App<iris-jdbc-ingest-worker>",
            "env": {"HOSTNAME":"192.168.11.48", "MASTER_HOSTNAME":"192.168.11.48","MASTER_PORT":"10002","MODE":"run"},

Debug(launch)-App<iris-jdbc-query-worker>をデバッグ実行。

6) 同様
7) 同様