#!/bin/bash

echo
echo "### HOOK - build environment:"
echo "   SOURCE_BRANCH  : $SOURCE_BRANCH"
echo "   SOURCE_COMMIT  : $SOURCE_COMMIT"
echo "   COMMIT_MSG     : $COMMIT_MSG"
echo "   DOCKER_REPO    : $DOCKER_REPO"
echo "   DOCKERFILE_PATH: $DOCKERFILE_PATH"
echo "   DOCKER_TAG     : $DOCKER_TAG"
echo "   DOCKER_TAG     : $IMAGE_NAME"

IMAGE_MASTER_NAME=${DOCKER_REPO}:master-${DOCKER_TAG}
IMAGE_IRIS_JDBC_INGEST_WORKER_NAME=${DOCKER_REPO}:iris-jdbc-ingest-worker-${DOCKER_TAG}
IMAGE_IRIS_JDBC_QUERY_WORKER_NAME=${DOCKER_REPO}:iris-jdbc-query-worker-${DOCKER_TAG}
IMAGE_UI_NAME=${DOCKER_REPO}:ui-${DOCKER_TAG}

build_java_project() {
	[[ -z "${1}" ]] && echo "Environment variable $1 not set. Need name of the java project to build." && exit 1

	rm ${PWD}/$1/projects/app.jar

	echo "Starting container $1 to recompile jar..."
	docker ps -a | grep $1 > /dev/null
	if [ $? -eq 0 ]; then
		# This will reuse the mavenc container that we used previously to compile the project
		# This way, we avoid redownloading all the depedencies!

		docker start -i $1
	else
		# First tiem trying to compile a project, let's create the mavenc container
		# It will download all the dependencies of the project
		docker run -it \
			-v ${PWD}/$1/projects:/usr/projects \
			--name $1 intersystemsdc/irisdemo-base-mavenc:latest
	fi
}

echo
echo "### HOOK - building image-master..."
build_java_project "image-master"
docker build -t ${IMAGE_MASTER_NAME} ./image-master

echo
echo "### HOOK - building image-iris-jdbc-ingest-worker..."
build_java_project "image-iris-jdbc-ingest-worker"
docker build -t ${IMAGE_IRIS_JDBC_INGEST_WORKER_NAME} ./image-iris-jdbc-ingest-worker

echo
echo "### HOOK - building image-iris-jdbc-query-worker..."
build_java_project "image-iris-jdbc-query-worker"
docker build -t ${IMAGE_IRIS_JDBC_QUERY_WORKER_NAME} ./image-iris-jdbc-query-worker

echo
echo "### HOOK - building image-ui..."
docker build -t ${IMAGE_UI_NAME} ./image-ui
